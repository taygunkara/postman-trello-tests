{
	"info": {
		"_postman_id": "891ed808-4704-44e6-acf5-0f2bddc28086",
		"name": "Trello APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17544637",
		"_collection_link": "https://www.postman.com/taygunkara/workspace/tello-api-tests/collection/17544637-891ed808-4704-44e6-acf5-0f2bddc28086?action=share&source=collection_link&creator=17544637"
	},
	"item": [
		{
			"name": "Board Operations",
			"item": [
				{
					"name": "CreateBoard",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Function 1: Create random board name",
									"function getRandomBoardName() {",
									"    const adjectives = [\"Innovative\", \"Dynamic\", \"Strategic\", \"Advanced\", \"Digital\"];",
									"    const nouns = [\"Banking\", \"Mobile\", \"Sales\", \"Civil\", \"Tech\", \"Development\"];",
									"    const types = [\"Project\", \"Initiative\", \"Program\", \"System\", \"Platform\"];",
									"    ",
									"    const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];",
									"    const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];",
									"    const randomType = types[Math.floor(Math.random() * types.length)];",
									"    ",
									"    return `${randomAdjective} ${randomNoun} ${randomType}`;",
									"}",
									"",
									"// Set board name to environment",
									"pm.environment.set(\"boardName\", getRandomBoardName());",
									"",
									"// ---------------------------------------------------------",
									"// Function 2: Create random board description",
									"function getRandomDescItem() {",
									"    const projectTypes = [\"web application\", \"mobile app\", \"desktop software\", \"cloud service\", \"API\"];",
									"    const features = [\"user authentication\", \"data visualization\", \"real-time updates\", \"file sharing\", \"payment processing\", \"social integration\", \"analytics dashboard\"];",
									"    const benefits = [\"improve productivity\", \"enhance user experience\", \"streamline workflow\", \"increase efficiency\", \"reduce costs\", \"boost security\"];",
									"",
									"    const randomType = projectTypes[Math.floor(Math.random() * projectTypes.length)];",
									"    const randomFeature1 = features[Math.floor(Math.random() * features.length)];",
									"    const randomFeature2 = features[Math.floor(Math.random() * features.length)];",
									"    const randomBenefit = benefits[Math.floor(Math.random() * benefits.length)];",
									"",
									"    return `This ${randomType} project includes key features such as ${randomFeature1} and ${randomFeature2}. The main goal is to ${randomBenefit} for the end users.`;",
									"}",
									"",
									"// ---------------------------------------------------------",
									"// Set board description to environment",
									"pm.environment.set(\"boardDesc\", getRandomDescItem());",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Set Board ID in Environment Variables",
									"pm.environment.set(\"boardId\", jsonData.id);",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful POST request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"POST\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Basic Data Validation",
									"pm.test(\"Response contains the necessary properties\", function () {",
									"",
									"    let missingProperties = [];",
									"    const properties = [",
									"    \"id\", ",
									"    \"name\", ",
									"    \"desc\", ",
									"    \"descData\", ",
									"    \"closed\", ",
									"    \"idOrganization\", ",
									"    \"idEnterprise\", ",
									"    \"pinned\", ",
									"    \"url\", ",
									"    \"prefs\"",
									"];",
									"",
									"    properties.forEach(function(property) {",
									"    if (!jsonData.hasOwnProperty(property)) {",
									"        missingProperties.push(property);",
									"}});",
									"",
									"    pm.expect(missingProperties).to.be.empty;",
									"    if (missingProperties.length > 0) {",
									"        console.log(\"Missing properties: \" + missingProperties.join(\", \"));",
									"    }",
									"});",
									"  ",
									"// ---------------------------------------------------------",
									"// Test 5: Validate Response Name",
									"pm.test(\"Response name is correct.\", function(){",
									"\tpm.expect(jsonData.name).is.eql(pm.environment.get(\"boardName\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 6: Validate Response ID",
									"pm.test(\"Response ID is correct.\", function(){",
									"\tpm.expect(jsonData.id).is.eql(pm.environment.get(\"boardId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 7: Validate Response Description",
									"pm.test(\"Response description is correct.\", function(){",
									"\tpm.expect(jsonData.desc).is.eql(pm.environment.get(\"boardDesc\"));",
									"});",
									"",
									"",
									"// ---------------------------------------------------------",
									"// Test 8: Critical Field Type Check",
									"const fieldTypes = {",
									"    id: \"string\",",
									"    name: \"string\",",
									"    desc: \"string\",",
									"    descData: \"object\",",
									"    closed: \"boolean\",",
									"    idOrganization: \"string\",",
									"    idEnterprise: \"object\",",
									"    pinned: \"boolean\",",
									"    url: \"string\",",
									"    prefs: \"object\"",
									"};",
									"",
									"Object.keys(fieldTypes).forEach(function(field) {",
									"    pm.test(`Field '${field}' type is correct`, function () {",
									"        pm.expect(typeof jsonData[field]).to.eql(fieldTypes[field]);",
									"    });",
									"});",
									"",
									"",
									"// ---------------------------------------------------------",
									"// Test 9: Non-Empty Check",
									"function checkNonEmptyField(field) {",
									"    pm.test(`Field '${field}' is non-empty`, function () {",
									"        if (typeof jsonData[field] === 'string') {",
									"            pm.expect(jsonData[field]).to.have.lengthOf.at.least(1);",
									"        } else if (typeof jsonData[field] === \"number\") {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        } else if (typeof jsonData[field] === \"boolean\") {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        } else if (typeof jsonData[field] === \"object\") {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        }",
									"    });",
									"}",
									"",
									"const fieldsToCheck = [",
									"    \"id\", ",
									"    \"name\", ",
									"    \"desc\", ",
									"    \"closed\", ",
									"    \"idOrganization\", ",
									"    \"url\", ",
									"    \"shortUrl\", ",
									"    \"prefs\", ",
									"    \"labelNames\", ",
									"    \"limits\"",
									"];",
									"",
									"fieldsToCheck.forEach(function(field) {",
									"    checkNonEmptyField(field);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 10: Basic Schema Validation",
									"pm.test(\"Basic schema is valid\", function () {",
									"    const schema = {",
									"        type: \"object\",",
									"        required: [\"id\", \"name\", \"desc\", \"closed\", \"url\"],",
									"        properties: {",
									"            id: { type: \"string\" },",
									"            name: { type: \"string\" },",
									"            desc: { type: \"string\" },",
									"            closed: { type: \"boolean\" },",
									"            url: { type: \"string\" }",
									"        },",
									"        additionalProperties: true",
									"    };",
									"",
									"    let result = tv4.validateMultiple(jsonData, schema);",
									"",
									"    if (!result.valid) {",
									"        result.errors.forEach(function(error) {",
									"            console.log(\"Validation error:\", error.message);",
									"            console.log(\"Field:\", error.dataPath);",
									"            console.log(\"Schema path:\", error.schemaPath);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.true;",
									"});",
									"",
									"// Set Next Request to GetBoard",
									"pm.execution.setNextRequest(\"GetBoard\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/?name={{boardName}}&desc={{boardDesc}}&key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "{{boardName}}"
								},
								{
									"key": "desc",
									"value": "{{boardDesc}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBoard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful GET request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"GET\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Basic Data Validation",
									"pm.test(\"Response contains the necessary properties\", function () {",
									"",
									"    let missingProperties = [];",
									"    const properties = [",
									"        \"id\", ",
									"        \"name\", ",
									"        \"desc\", ",
									"        \"descData\", ",
									"        \"closed\", ",
									"        \"idOrganization\", ",
									"        \"idEnterprise\", ",
									"        \"pinned\", ",
									"        \"url\", ",
									"        \"prefs\"",
									"    ];",
									"",
									"    properties.forEach(function(property) {",
									"    if (!jsonData.hasOwnProperty(property)) {",
									"        missingProperties.push(property);",
									"    }});",
									"",
									"    pm.expect(missingProperties).to.be.empty;",
									"    if (missingProperties.length > 0) {",
									"        console.log(\"Missing properties: \" + missingProperties.join(\", \"));",
									"    }",
									"});",
									"  ",
									"// ---------------------------------------------------------",
									"// Test 5: Validate Response Name",
									"pm.test(\"Response name is correct.\", function(){",
									"\tpm.expect(jsonData.name).is.eql(pm.environment.get(\"boardName\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 6: Validate Response ID",
									"pm.test(\"Response ID is correct.\", function(){",
									"\tpm.expect(jsonData.id).is.eql(pm.environment.get(\"boardId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 7: Validate Response Description",
									"pm.test(\"Response description is correct.\", function(){",
									"\tpm.expect(jsonData.desc).is.eql(pm.environment.get(\"boardDesc\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 8: Critical Field Type Check",
									"const fieldTypes = {",
									"    id: \"string\",",
									"    name: \"string\",",
									"    desc: \"string\",",
									"    descData: \"object\",",
									"    closed: \"boolean\",",
									"    idOrganization: \"string\",",
									"    idEnterprise: \"object\",",
									"    pinned: \"boolean\",",
									"    url: \"string\",",
									"    prefs: \"object\"",
									"};",
									"",
									"Object.keys(fieldTypes).forEach(function(field) {",
									"    pm.test(`Field '${field}' type is correct`, function () {",
									"        pm.expect(typeof jsonData[field]).to.eql(fieldTypes[field]);",
									"    });",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 9: Non-Empty Check",
									"function checkNonEmptyField(field) {",
									"    pm.test(`Field '${field}' is non-empty`, function () {",
									"        if (typeof jsonData[field] === 'string') {",
									"            pm.expect(jsonData[field]).to.have.lengthOf.at.least(1);",
									"        } else if (typeof jsonData[field] === 'number') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        } else if (typeof jsonData[field] === 'boolean') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        } else if (typeof jsonData[field] === 'object') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        }",
									"    });",
									"}",
									"",
									"const fieldsToCheck = [",
									"    'id', ",
									"    'name', ",
									"    'desc', ",
									"    'closed', ",
									"    'idOrganization', ",
									"    'url', ",
									"    'shortUrl', ",
									"    'prefs', ",
									"    'labelNames', ",
									"    'limits'",
									"];",
									"",
									"fieldsToCheck.forEach(function(field) {",
									"    checkNonEmptyField(field);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 10: Basic Schema Validation",
									"pm.test(\"Basic schema is valid\", function () {",
									"    let schema = {",
									"        type: \"object\",",
									"        required: [\"id\", \"name\", \"desc\", \"closed\", \"url\"],",
									"        properties: {",
									"            id: { type: \"string\" },",
									"            name: { type: \"string\" },",
									"            desc: { type: \"string\" },",
									"            closed: { type: \"boolean\" },",
									"            url: { type: \"string\" }",
									"        },",
									"        additionalProperties: true",
									"    };",
									"",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 11: Validate `prefs` Structure and Types",
									"pm.test(\"Prefs is an object with correct types\", function () {",
									"    ",
									"    let prefs = jsonData.prefs;",
									"    pm.expect(typeof prefs).to.eql(\"object\");",
									"",
									"    const expectedTypes = {",
									"        permissionLevel: \"string\",",
									"        hideVotes: \"boolean\",",
									"        voting: \"string\",",
									"        comments: \"string\",",
									"        invitations: \"string\",",
									"        selfJoin: \"boolean\",",
									"        cardCovers: \"boolean\",",
									"        cardCounts: \"boolean\",",
									"        isTemplate: \"boolean\",",
									"        cardAging: \"string\",",
									"        calendarFeedEnabled: \"boolean\",",
									"        hiddenPluginBoardButtons: \"object\",",
									"        switcherViews: \"object\",",
									"        background: \"string\",",
									"        backgroundColor: \"string\",",
									"        backgroundImage: \"object\",",
									"        backgroundTile: \"boolean\",",
									"        backgroundBrightness: \"string\",",
									"        sharedSourceUrl: \"object\",",
									"        backgroundImageScaled: \"object\",",
									"        backgroundBottomColor: \"string\",",
									"        backgroundTopColor: \"string\",",
									"        canBePublic: \"boolean\",",
									"        canBeEnterprise: \"boolean\",",
									"        canBeOrg: \"boolean\",",
									"        canBePrivate: \"boolean\",",
									"        canInvite: \"boolean\"",
									"    };",
									"",
									"",
									"    Object.keys(expectedTypes).forEach(function (key) {",
									"        pm.test(`Field '${key}' is of type '${expectedTypes[key]}'`, function () {",
									"            if (typeof prefs[key] !== expectedTypes[key]) {",
									"                pm.expect.fail(`Field '${key}' should be of type '${expectedTypes[key]}', but got '${typeof prefs[key]}'`);",
									"            }",
									"        });",
									"    });",
									"",
									"",
									"    pm.test(\"Field 'hiddenPluginBoardButtons' is an array\", function () {",
									"        pm.expect(Array.isArray(prefs.hiddenPluginBoardButtons)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"Field 'switcherViews' is an array\", function () {",
									"        pm.expect(Array.isArray(prefs.switcherViews)).to.be.true;",
									"    });",
									"});",
									"",
									"// Set Next Request to UpdateBoard",
									"pm.execution.setNextRequest(\"UpdateBoard\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure boardId is set",
									"if (!pm.environment.get(\"boardId\")) {",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/{{boardId}}?key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								"{{boardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBoard",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure boardId is set",
									"if (!pm.environment.get(\"boardId\")) {",
									"    pm.execution.setNextRequest(null);",
									"}",
									"",
									"// ---------------------------------------------------------",
									"// Function 1: Create random board name",
									"function getRandomBoardName() {",
									"    const adjectives = [\"Innovative\", \"Dynamic\", \"Strategic\", \"Advanced\", \"Digital\"];",
									"    const nouns = [\"Banking\", \"Mobile\", \"Sales\", \"Civil\", \"Tech\", \"Development\"];",
									"    const types = [\"Project\", \"Initiative\", \"Program\", \"System\", \"Platform\"];",
									"    ",
									"    const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];",
									"    const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];",
									"    const randomType = types[Math.floor(Math.random() * types.length)];",
									"    ",
									"    return `${randomAdjective} ${randomNoun} ${randomType}`;",
									"}",
									"",
									"// Set updated board name to environment",
									"pm.environment.set(\"updatedBoardName\", getRandomBoardName());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Set Updated Board ID in Environment Variables",
									"pm.environment.set(\"updatedBoardId\", jsonData.id);",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful PUT request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"PUT\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Basic Data Validation",
									"pm.test(\"Response contains the necessary properties\", function () {",
									"",
									"    let missingProperties = [];",
									"    const properties = [",
									"        \"id\", ",
									"        \"name\", ",
									"        \"desc\", ",
									"        \"descData\", ",
									"        \"closed\", ",
									"        \"idOrganization\", ",
									"        \"idEnterprise\", ",
									"        \"pinned\",",
									"        \"url\", ",
									"        \"prefs\"",
									"    ];",
									"",
									"    properties.forEach(function(property) {",
									"    if (!jsonData.hasOwnProperty(property)) {",
									"        missingProperties.push(property);",
									"}});",
									"",
									"    pm.expect(missingProperties).to.be.empty;",
									"    if (missingProperties.length > 0) {",
									"        console.log(\"Missing properties: \" + missingProperties.join(\", \"));",
									"    }",
									"});",
									"  ",
									"// ---------------------------------------------------------",
									"// Test 5: Validate Response Name",
									"pm.test(\"Response name is correct.\", function(){",
									"\tpm.expect(jsonData.name).is.eql(pm.environment.get(\"updatedBoardName\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 6: Validate Response ID",
									"pm.test(\"Response ID is correct.\", function(){",
									"\tpm.expect(jsonData.id).is.eql(pm.environment.get(\"updatedBoardId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 7: Validate Response Description",
									"pm.test(\"Response description is correct.\", function(){",
									"\tpm.expect(jsonData.desc).is.eql(pm.environment.get(\"boardDesc\"));",
									"});",
									"",
									"",
									"// ---------------------------------------------------------",
									"// Test 8: Critical Field Type Check",
									"const fieldTypes = {",
									"    id: \"string\",",
									"    name: \"string\",",
									"    desc: \"string\",",
									"    descData: \"object\",",
									"    closed: \"boolean\",",
									"    idOrganization: \"string\",",
									"    idEnterprise: \"object\",",
									"    pinned: \"boolean\",",
									"    url: \"string\",",
									"    prefs: \"object\"",
									"};",
									"",
									"Object.keys(fieldTypes).forEach(function(field) {",
									"    pm.test(`Field '${field}' type is correct`, function () {",
									"        pm.expect(typeof jsonData[field]).to.eql(fieldTypes[field]);",
									"    });",
									"});",
									"",
									"",
									"// ---------------------------------------------------------",
									"// Test 9: Non-Empty Check",
									"function checkNonEmptyField(field) {",
									"    pm.test(`Field '${field}' is non-empty`, function () {",
									"        if (typeof jsonData[field] === 'string') {",
									"            pm.expect(jsonData[field]).to.have.lengthOf.at.least(1);",
									"        } else if (typeof jsonData[field] === \"number\") {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        } else if (typeof jsonData[field] === \"boolean\") {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        } else if (typeof jsonData[field] === \"object\") {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        }",
									"    });",
									"}",
									"",
									"const fieldsToCheck = [",
									"    \"id\", ",
									"    \"name\", ",
									"    \"desc\", ",
									"    \"closed\", ",
									"    \"idOrganization\", ",
									"    \"url\", ",
									"    \"shortUrl\", ",
									"    \"prefs\", ",
									"    \"labelNames\", ",
									"    \"limits\"",
									"];",
									"",
									"fieldsToCheck.forEach(function(field) {",
									"    checkNonEmptyField(field);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 10: Basic Schema Validation",
									"pm.test(\"Basic schema is valid\", function () {",
									"    const schema = {",
									"        type: \"object\",",
									"        required: [\"id\", \"name\", \"desc\", \"closed\", \"url\"],",
									"        properties: {",
									"            id: { type: \"string\" },",
									"            name: { type: \"string\" },",
									"            desc: { type: \"string\" },",
									"            closed: { type: \"boolean\" },",
									"            url: { type: \"string\" }",
									"        },",
									"        additionalProperties: true",
									"    };",
									"",
									"    let result = tv4.validateMultiple(jsonData, schema);",
									"",
									"    if (!result.valid) {",
									"        result.errors.forEach(function(error) {",
									"            console.log(\"Validation error:\", error.message);",
									"            console.log(\"Field:\", error.dataPath);",
									"            console.log(\"Schema path:\", error.schemaPath);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.true;",
									"});",
									"",
									"// Set Next Request to CreateList",
									"pm.execution.setNextRequest(\"CreateList\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/{{boardId}}?key={{trelloKey}}&token={{trelloToken}}&name={{updatedBoardName}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								"{{boardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								},
								{
									"key": "name",
									"value": "{{updatedBoardName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteBoard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful DELETE request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"DELETE\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Verify the API Response has _value property",
									"pm.test(\"Response has _value property\", function () {",
									"    pm.expect(jsonData).to.have.property('_value');",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Verify the _value property is null",
									"pm.test(\"_value property is null\", function () {",
									"    pm.expect(jsonData._value).to.be.null;",
									"});",
									"",
									"// pm.environment.unset(\"boardId\");",
									"// pm.environment.unset(\"cardId\");",
									"",
									"pm.execution.setNextRequest(\"CreateBoard_MissingNameField\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/{{updatedBoardId}}?key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								"{{updatedBoardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Board Operations - Negative Tests",
			"item": [
				{
					"name": "CreateBoard_MissingNameField",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set empty board name to environment",
									"pm.environment.set(\"emptyBoardName\", \" \");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"var jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Status Code",
									"pm.test(\"Status code is 400\", function () {",
									"\tpm.response.to.have.status(400);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Validate Response",
									"pm.test(\"CreateBoard_MissingNameField\", function () {",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include(\"invalid value for name\");",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.include(\"ERROR\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Critical Field Type Check",
									"var fieldTypes = {",
									"    message: \"string\",",
									"    error: \"string\"",
									"};",
									"",
									"Object.keys(fieldTypes).forEach(function(field) {",
									"    pm.test(`Field '${field}' type is correct`, function () {",
									"        pm.expect(typeof jsonData[field]).to.eql(fieldTypes[field]);",
									"    });",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Non-Empty Check",
									"function checkNonEmptyField(field) {",
									"    pm.test(`Field '${field}' is non-empty`, function () {",
									"        if (typeof jsonData[field] === 'string') {",
									"            pm.expect(jsonData[field]).to.have.lengthOf.at.least(1);",
									"        }",
									"    });",
									"}",
									"",
									"var fieldsToCheck = [",
									"    \"message\", ",
									"    \"error\"",
									"];",
									"",
									"fieldsToCheck.forEach(function(field) {",
									"    checkNonEmptyField(field);",
									"});",
									"",
									"pm.execution.setNextRequest(\"CreateBoard_InvalidKey\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/?name={{emptyBoardName}}&key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "{{emptyBoardName}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateBoard_InvalidKey",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Function 1: Create random board name",
									"function getRandomBoardName() {",
									"    const adjectives = [\"Innovative\", \"Dynamic\", \"Strategic\", \"Advanced\", \"Digital\"];",
									"    const nouns = [\"Banking\", \"Mobile\", \"Sales\", \"Civil\", \"Tech\", \"Development\"];",
									"    const types = [\"Project\", \"Initiative\", \"Program\", \"System\", \"Platform\"];",
									"    ",
									"    const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];",
									"    const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];",
									"    const randomType = types[Math.floor(Math.random() * types.length)];",
									"    ",
									"    return `${randomAdjective} ${randomNoun} ${randomType}`;",
									"}",
									"",
									"// Set board name to environment",
									"pm.environment.set(\"boardName\", getRandomBoardName());",
									"",
									"// Set invalid key to environment",
									"pm.environment.set(\"invalidKey\", \"123456\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Test 1: Status Code",
									"pm.test(\"Status code is 401\", function () {",
									"\tpm.response.to.have.status(401);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: Response Format",
									"pm.test(\"Content-Type is String in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"text/plain; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Validate Response",
									"pm.test(\"CreateBoard_MissingNameField\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid key\");",
									"});",
									"",
									"pm.execution.setNextRequest(\"CreateBoard_InvalidToken\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/?name={{boardName}}&key={{invalidKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "{{boardName}}"
								},
								{
									"key": "key",
									"value": "{{invalidKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateBoard_InvalidToken",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set invalid token to environment",
									"pm.environment.set(\"invalidToken\", \"123456\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Test 1: Status Code",
									"pm.test(\"Status code is 401\", function () {",
									"\tpm.response.to.have.status(401);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: Response Format",
									"pm.test(\"Content-Type is String in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"text/plain; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Validate Response",
									"pm.test(\"CreateBoard_MissingNameField\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid app token\");",
									"});",
									"",
									"pm.execution.setNextRequest(\"GetBoard_InvalidId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/?name={{boardName}}&key={{trelloKey}}&token={{invalidToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "{{boardName}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{invalidToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBoard_InvalidId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Test 1: Status Code",
									"pm.test(\"Status code is 400\", function () {",
									"\tpm.response.to.have.status(400);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: Response Format",
									"pm.test(\"Content-Type is String in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"text/plain; charset=utf-8\");",
									"});",
									"",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Validate Response",
									"pm.test(\"CreateBoard_MissingNameField\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"invalid id\");",
									"});",
									"",
									"pm.execution.setNextRequest(null);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/{{invalidBoardId}}?key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								"{{invalidBoardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List Operations",
			"item": [
				{
					"name": "CreateList",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure updatedBoardId is set",
									"if (!pm.environment.get(\"updatedBoardId\")) {",
									"    pm.execution.setNextRequest(null);",
									"}",
									"",
									"// ---------------------------------------------------------",
									"// Function 1: Create random list name",
									"function getRandomListName() {",
									"    const listNames = [",
									"        \"Backlog\",",
									"        \"To Do\",",
									"        \"In Progress\",",
									"        \"In Review\",",
									"        \"Testing\",",
									"        \"Done\",",
									"        \"Blocked\",",
									"        \"On Hold\",",
									"        \"Planning\",",
									"        \"Development\",",
									"        \"QA\",",
									"        \"UAT\",",
									"        \"Deployment\",",
									"        \"Maintenance\",",
									"        \"Archive\"",
									"    ];",
									"",
									"    const randomList = listNames[Math.floor(Math.random() * listNames.length)];",
									"    return `${randomList}`;",
									"}",
									"",
									"// Set list name to environment",
									"pm.environment.set(\"listName\", getRandomListName());",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Set List ID in Environment Variables",
									"pm.environment.set(\"listId\", jsonData.id);",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful POST request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"POST\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Basic Data Validation",
									"pm.test(\"Response contains the necessary properties\", function () {",
									"",
									"    let missingProperties = [];",
									"    const properties = [    ",
									"        \"id\", ",
									"        \"name\", ",
									"        \"closed\", ",
									"        \"color\", ",
									"        \"idBoard\", ",
									"        \"pos\", ",
									"        \"limits\"",
									"    ];",
									"",
									"    properties.forEach(function(property) {",
									"    if (!jsonData.hasOwnProperty(property)) {",
									"        missingProperties.push(property);",
									"    }});",
									"",
									"    pm.expect(missingProperties).to.be.empty;",
									"    if (missingProperties.length > 0) {",
									"        console.log(\"Missing properties: \" + missingProperties.join(\", \"));",
									"    }",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Validate Response Name",
									"pm.test(\"Response name is correct.\", function(){",
									"\tpm.expect(jsonData.name).is.eql(pm.environment.get(\"listName\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 6: Validate Response ID",
									"pm.test(\"Response ID is correct.\", function(){",
									"\tpm.expect(jsonData.id).is.eql(pm.environment.get(\"listId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 7: Critical Field Type Check",
									"const fieldTypes = {",
									"    id: \"string\",",
									"    name: \"string\",",
									"    closed: \"boolean\",",
									"    color: \"object\",",
									"    idBoard: \"string\",",
									"    pos: \"number\",",
									"    limits: \"object\"",
									"};",
									"",
									"Object.keys(fieldTypes).forEach(function(field) {",
									"    pm.test(`Field '${field}' type is correct`, function () {",
									"        pm.expect(typeof jsonData[field]).to.eql(fieldTypes[field]);",
									"    });",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 8: Non-Empty Check",
									"function checkNonEmptyField(field) {",
									"    pm.test(`Field '${field}' is non-empty`, function () {",
									"        if (typeof jsonData[field] === 'string') {",
									"            pm.expect(jsonData[field]).to.have.lengthOf.at.least(1);",
									"        } else if (typeof jsonData[field] === 'number') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        } else if (typeof jsonData[field] === 'boolean') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        }",
									"    });",
									"}",
									"",
									"const fieldsToCheck = ['id', 'name', 'closed', 'idBoard', 'pos'];",
									"fieldsToCheck.forEach(function(field) {",
									"    checkNonEmptyField(field);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 10: Basic Schema Validation",
									"pm.test(\"Basic schema is valid\", function () {",
									"    const schema = {",
									"        type: \"object\",",
									"        required: [\"id\", \"name\", \"closed\", \"color\", \"idBoard\", \"pos\", \"limits\"],",
									"        properties: {",
									"            id: { type: \"string\" },",
									"            name: { type: \"string\" },",
									"            closed: { type: \"boolean\" },",
									"            idBoard: { type: \"string\" },",
									"            pos: { type: \"number\" },",
									"            limits: { type: \"object\" }",
									"        }",
									"    };",
									"    let result = tv4.validateMultiple(jsonData, schema);",
									"",
									"    if (!result.valid) {",
									"        result.errors.forEach(function(error) {",
									"            console.log(\"Validation error:\", error.message);",
									"            console.log(\"Field:\", error.dataPath);",
									"            console.log(\"Schema path:\", error.schemaPath);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.true;",
									"});",
									"",
									"// Set Next Request to GetList",
									"pm.execution.setNextRequest(\"GetList\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}?name={{listName}}&idBoard={{updatedBoardId}}&key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}"
							],
							"query": [
								{
									"key": "name",
									"value": "{{listName}}"
								},
								{
									"key": "idBoard",
									"value": "{{updatedBoardId}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful GET request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"GET\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Basic Data Validation",
									"pm.test(\"Response contains the necessary properties\", function () {",
									"",
									"    let missingProperties = [];",
									"    const properties = [",
									"        \"id\", ",
									"        \"name\", ",
									"        \"closed\", ",
									"        \"color\", ",
									"        \"idBoard\", ",
									"        \"pos\"",
									"    ];",
									"",
									"    properties.forEach(function(property) {",
									"    if (!jsonData.hasOwnProperty(property)) {",
									"        missingProperties.push(property);",
									"    }});",
									"",
									"    pm.expect(missingProperties).to.be.empty;",
									"    if (missingProperties.length > 0) {",
									"        console.log(\"Missing properties: \" + missingProperties.join(\", \"));",
									"    }",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Validate Response Name",
									"pm.test(\"Response name is correct.\", function(){",
									"\tpm.expect(jsonData.name).is.eql(pm.environment.get(\"listName\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 6: Validate Response ID",
									"pm.test(\"Response ID is correct.\", function(){",
									"\tpm.expect(jsonData.id).is.eql(pm.environment.get(\"listId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 7: Critical Field Type Check",
									"const fieldTypes = {",
									"    id: \"string\",",
									"    name: \"string\",",
									"    closed: \"boolean\",",
									"    color: \"object\",",
									"    idBoard: \"string\",",
									"    pos: \"number\",",
									"};",
									"",
									"Object.keys(fieldTypes).forEach(function(field) {",
									"    pm.test(`Field '${field}' type is correct`, function () {",
									"        pm.expect(typeof jsonData[field]).to.eql(fieldTypes[field]);",
									"    });",
									"});",
									"",
									"",
									"// ---------------------------------------------------------",
									"// Test 8: Non-Empty Check",
									"function checkNonEmptyField(field) {",
									"    pm.test(`Field '${field}' is non-empty`, function () {",
									"        if (typeof jsonData[field] === 'string') {",
									"            pm.expect(jsonData[field]).to.have.lengthOf.at.least(1);",
									"        } else if (typeof jsonData[field] === 'number') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        } else if (typeof jsonData[field] === 'boolean') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        }",
									"    });",
									"}",
									"",
									"const fieldsToCheck = [        ",
									"        \"id\", ",
									"        \"name\", ",
									"        \"closed\", ",
									"        \"color\", ",
									"        \"idBoard\", ",
									"        \"pos\"",
									"    ];",
									"fieldsToCheck.forEach(function(field) {",
									"    checkNonEmptyField(field);",
									"});",
									"",
									"// Set Next Request to UpdateList",
									"pm.execution.setNextRequest(\"UpdateList\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure listId is set",
									"if (!pm.environment.get(\"listId\")) {",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/{{listId}}?key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								"{{listId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateList",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure listId is set",
									"if (!pm.environment.get(\"listId\")) {",
									"    pm.execution.setNextRequest(null);",
									"}",
									"",
									"// ---------------------------------------------------------",
									"// Function 1: Create random list name",
									"function getRandomListName() {",
									"    const listNames = [",
									"        \"Backlog\",",
									"        \"To Do\",",
									"        \"In Progress\",",
									"        \"In Review\",",
									"        \"Testing\",",
									"        \"Done\",",
									"        \"Blocked\",",
									"        \"On Hold\",",
									"        \"Planning\",",
									"        \"Development\",",
									"        \"QA\",",
									"        \"UAT\",",
									"        \"Deployment\",",
									"        \"Maintenance\",",
									"        \"Archive\"",
									"    ];",
									"",
									"    const randomList = listNames[Math.floor(Math.random() * listNames.length)];",
									"    return `${randomList}`;",
									"}",
									"",
									"// Set list name to environment",
									"pm.environment.set(\"updatedListName\", getRandomListName());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Set Updated Card ID in Environment Variables",
									"pm.environment.set(\"updatedListId\", jsonData.id);",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful PUT request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"PUT\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Basic Data Validation",
									"pm.test(\"Response contains the necessary properties\", function () {",
									"",
									"    let missingProperties = [];",
									"    const properties = [    ",
									"        \"id\", ",
									"        \"name\", ",
									"        \"closed\", ",
									"        \"color\", ",
									"        \"idBoard\", ",
									"        \"pos\"",
									"    ];",
									"",
									"    properties.forEach(function(property) {",
									"    if (!jsonData.hasOwnProperty(property)) {",
									"        missingProperties.push(property);",
									"    }});",
									"",
									"    pm.expect(missingProperties).to.be.empty;",
									"    if (missingProperties.length > 0) {",
									"        console.log(\"Missing properties: \" + missingProperties.join(\", \"));",
									"    }",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Validate Response Name",
									"pm.test(\"Response name is correct\", function(){",
									"\tpm.expect(jsonData.name).is.eql(pm.environment.get(\"updatedListName\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 6: Validate Response ID",
									"pm.test(\"Response ID is correct\", function(){",
									"\tpm.expect(jsonData.id).is.eql(pm.environment.get(\"updatedListId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 7: Critical Field Type Check",
									"const fieldTypes = {",
									"    id: \"string\",",
									"    name: \"string\",",
									"    closed: \"boolean\",",
									"    color: \"object\",",
									"    idBoard: \"string\",",
									"    pos: \"number\"",
									"};",
									"",
									"Object.keys(fieldTypes).forEach(function(field) {",
									"    pm.test(`Field '${field}' type is correct`, function () {",
									"        pm.expect(typeof jsonData[field]).to.eql(fieldTypes[field]);",
									"    });",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 8: Non-Empty Check",
									"function checkNonEmptyField(field) {",
									"    pm.test(`Field '${field}' is non-empty`, function () {",
									"        if (typeof jsonData[field] === 'string') {",
									"            pm.expect(jsonData[field]).to.have.lengthOf.at.least(1);",
									"        } else if (typeof jsonData[field] === 'number') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        } else if (typeof jsonData[field] === 'boolean') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        }",
									"    });",
									"}",
									"",
									"const fieldsToCheck = ['id', 'name', 'closed', 'idBoard', 'pos'];",
									"fieldsToCheck.forEach(function(field) {",
									"    checkNonEmptyField(field);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 9: Basic Schema Validation",
									"pm.test(\"Basic schema is valid\", function () {",
									"    const schema = {",
									"        type: \"object\",",
									"        required: [\"id\", \"name\", \"closed\", \"color\", \"idBoard\", \"pos\"],",
									"        properties: {",
									"            id: { type: \"string\" },",
									"            name: { type: \"string\" },",
									"            closed: { type: \"boolean\" },",
									"            idBoard: { type: \"string\" },",
									"            pos: { type: \"number\" }",
									"        }",
									"    };",
									"    let result = tv4.validateMultiple(jsonData, schema);",
									"",
									"    if (!result.valid) {",
									"        result.errors.forEach(function(error) {",
									"            console.log(\"Validation error:\", error.message);",
									"            console.log(\"Field:\", error.dataPath);",
									"            console.log(\"Schema path:\", error.schemaPath);",
									"        });",
									"    }",
									"    pm.expect(result.valid).to.be.true;",
									"});",
									"",
									"// Set Next Request to CreateCard",
									"pm.execution.setNextRequest(\"CreateCard\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/{{listId}}?name={{updatedListName}}&key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								"{{listId}}"
							],
							"query": [
								{
									"key": "name",
									"value": "{{updatedListName}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Card Operations",
			"item": [
				{
					"name": "CreateCard",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure updatedListId is set",
									"if (!pm.environment.get(\"updatedListId\")) {",
									"    pm.execution.setNextRequest(null);",
									"}",
									"",
									"// ---------------------------------------------------------",
									"// Function 1: Create random card title",
									"function getRandomCardTitle() {",
									"    const taskTypes = [\"Bug Fix\", \"Feature Implementation\", \"Refactoring\", \"Documentation\", \"Testing\", \"Design Update\"];",
									"    const priorities = [\"High\", \"Medium\", \"Low\", \"Critical\", \"Normal\"];",
									"    ",
									"    const randomTaskType = taskTypes[Math.floor(Math.random() * taskTypes.length)];",
									"    const randomPriority = priorities[Math.floor(Math.random() * priorities.length)];",
									"    ",
									"    return `${randomPriority} Priority: ${randomTaskType}`;",
									"}",
									"",
									"// Set card name to environment",
									"pm.environment.set(\"cardName\", getRandomCardTitle());",
									"",
									"// ---------------------------------------------------------",
									"// Function 2: Create random card description",
									"function getRandomCardDescription() {",
									"    const impacts = [\"user experience\", \"system performance\", \"code quality\", \"project timeline\", \"team productivity\"];",
									"    const actions = [\"needs immediate attention\", \"requires careful planning\", \"should be addressed in the next sprint\", \"can be handled when resources are available\"];",
									"    ",
									"    const randomImpact = impacts[Math.floor(Math.random() * impacts.length)];",
									"    const randomAction = actions[Math.floor(Math.random() * actions.length)];",
									"    ",
									"    return `This task affects ${randomImpact} and ${randomAction}. Please proceed according to the project guidelines.`;",
									"}",
									"",
									"// Set card name to environment",
									"pm.environment.set(\"cardDesc\", getRandomCardDescription());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Set List ID in Environment Variables",
									"pm.environment.set(\"cardId\", jsonData.id);",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful POST request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"POST\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Basic Data Validation",
									"pm.test(\"Response contains the necessary properties\", function () {",
									"",
									"    let missingProperties = [];",
									"    const properties = [",
									"        \"id\",",
									"        \"name\",",
									"        \"closed\",",
									"        \"idBoard\",",
									"        \"pos\",",
									"        \"url\",",
									"        \"dateLastActivity\",",
									"        \"desc\"",
									"    ];",
									"",
									"    properties.forEach(function(property) {",
									"    if (!jsonData.hasOwnProperty(property)) {",
									"        missingProperties.push(property);",
									"    }});",
									"",
									"    pm.expect(missingProperties).to.be.empty;",
									"    if (missingProperties.length > 0) {",
									"        console.log(\"Missing properties: \" + missingProperties.join(\", \"));",
									"    }",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Validate Response Name",
									"pm.test(\"Response name is correct.\", function(){",
									"\tpm.expect(jsonData.name).is.eql(pm.environment.get(\"cardName\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 6: Validate Response ID",
									"pm.test(\"Response ID is correct.\", function(){",
									"\tpm.expect(jsonData.id).is.eql(pm.environment.get(\"cardId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 7: Validate Response Description",
									"pm.test(\"Response description is correct.\", function(){",
									"\tpm.expect(jsonData.desc).is.eql(pm.environment.get(\"cardDesc\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 7: Critical Field Type Check",
									"const fieldTypes = {",
									"    id: \"string\",",
									"    name: \"string\",",
									"    closed: \"boolean\",",
									"    idBoard: \"string\",",
									"    pos: \"number\",",
									"    url: \"string\",",
									"    dateLastActivity: \"string\",",
									"    desc: \"string\"",
									"};",
									"",
									"Object.keys(fieldTypes).forEach(function(field) {",
									"    pm.test(`Field '${field}' type is correct`, function () {",
									"        pm.expect(typeof jsonData[field]).to.eql(fieldTypes[field]);",
									"    });",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 8: Non-Empty Check",
									"function checkNonEmptyField(field) {",
									"    pm.test(`Field '${field}' is non-empty`, function () {",
									"        if (typeof jsonData[field] === 'string') {",
									"            pm.expect(jsonData[field]).to.have.lengthOf.at.least(1);",
									"        } else if (typeof jsonData[field] === 'number') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        } else if (typeof jsonData[field] === 'boolean') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        }",
									"    });",
									"}",
									"",
									"const fieldsToCheck = [\"id\", \"name\", \"closed\", \"idBoard\", \"pos\", \"url\", \"dateLastActivity\", \"desc\"];",
									"fieldsToCheck.forEach(function(field) {",
									"    checkNonEmptyField(field);",
									"});",
									"",
									"// Set Next Request to GetCard",
									"pm.execution.setNextRequest(\"GetCard\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}?idList={{updatedListId}}&name={{cardName}}&desc={{cardDesc}}&key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}"
							],
							"query": [
								{
									"key": "idList",
									"value": "{{updatedListId}}"
								},
								{
									"key": "name",
									"value": "{{cardName}}"
								},
								{
									"key": "desc",
									"value": "{{cardDesc}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetCard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful GET request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"GET\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Basic Data Validation",
									"pm.test(\"Response contains the necessary properties\", function () {",
									"",
									"    let missingProperties = [];",
									"    const properties = [",
									"        \"id\", ",
									"        \"badges\", ",
									"        \"checkItemStates\", ",
									"        \"closed\", ",
									"        \"dueComplete\", ",
									"        \"dateLastActivity\",",
									"        \"desc\",",
									"        \"idBoard\",",
									"        \"idChecklists\",",
									"        \"idList\",",
									"        \"name\",",
									"        \"pos\",",
									"        \"shortUrl\",",
									"        \"url\",",
									"        \"cover\"",
									"    ];",
									"",
									"    properties.forEach(function(property) {",
									"    if (!jsonData.hasOwnProperty(property)) {",
									"        missingProperties.push(property);",
									"    }});",
									"",
									"    pm.expect(missingProperties).to.be.empty;",
									"    if (missingProperties.length > 0) {",
									"        console.log(\"Missing properties: \" + missingProperties.join(\", \"));",
									"    }",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Badges Data Validation",
									"pm.test(\"Badges contains the necessary properties\", function () {",
									"",
									"    if (jsonData.hasOwnProperty('badges')) {",
									"        let badgesMissingProperties = [];",
									"        const badgesProperties = [",
									"            \"attachmentsByType\", ",
									"            \"externalSource\", ",
									"            \"location\", ",
									"            \"votes\", ",
									"            \"viewingMemberVoted\",",
									"            \"subscribed\", ",
									"            \"attachments\", ",
									"            \"fogbugz\", ",
									"            \"checkItems\", ",
									"            \"checkItemsChecked\",",
									"            \"checkItemsEarliestDue\", ",
									"            \"comments\", ",
									"            \"description\", ",
									"            \"due\", ",
									"            \"dueComplete\",",
									"            \"lastUpdatedByAi\", ",
									"            \"start\"",
									"        ];",
									"",
									"        badgesProperties.forEach(function(property) {",
									"            if (!jsonData.badges.hasOwnProperty(property)) {",
									"                badgesMissingProperties.push(property);",
									"            }",
									"        });",
									"",
									"        pm.expect(badgesMissingProperties).to.be.empty;",
									"        if (badgesMissingProperties.length > 0) {",
									"            console.log(\"Missing badges properties: \" + badgesMissingProperties.join(\", \"));",
									"        }",
									"    }",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 6: Cover Data Validation",
									"pm.test(\"Cover contains the necessary properties\", function () {",
									"",
									"    if (jsonData.hasOwnProperty('cover')) {",
									"        let coverMissingProperties = [];",
									"        const coverProperties = [",
									"            \"idAttachment\", ",
									"            \"color\", ",
									"            \"idUploadedBackground\", ",
									"            \"size\", ",
									"            \"brightness\",",
									"            \"idPlugin\"",
									"        ];",
									"",
									"        coverProperties.forEach(function(property) {",
									"            if (!jsonData.cover.hasOwnProperty(property)) {",
									"                coverMissingProperties.push(property);",
									"            }",
									"        });",
									"",
									"        pm.expect(coverMissingProperties).to.be.empty;",
									"        if (coverMissingProperties.length > 0) {",
									"            console.log(\"Missing cover properties: \" + coverMissingProperties.join(\", \"));",
									"        }",
									"    }",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 7: Validate Response Name",
									"pm.test(\"Response name is correct.\", function(){",
									"\tpm.expect(jsonData.name).is.eql(pm.environment.get(\"cardName\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 8: Validate Response ID",
									"pm.test(\"Response ID is correct.\", function(){",
									"\tpm.expect(jsonData.id).is.eql(pm.environment.get(\"cardId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 8: Validate Response Description",
									"pm.test(\"Response desc is correct.\", function(){",
									"\tpm.expect(jsonData.desc).is.eql(pm.environment.get(\"cardDesc\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 9: Critical Field Type Check",
									"const fieldTypes = {",
									"    id: \"string\",",
									"    badges: \"object\",",
									"    checkItemStates: \"object\",",
									"    closed: \"boolean\",",
									"    dueComplete: \"boolean\",",
									"    dateLastActivity: \"string\",",
									"    desc: \"string\",",
									"    idBoard: \"string\",",
									"    idChecklists: \"object\",",
									"    idList: \"string\",",
									"    name: \"string\",",
									"    pos: \"number\",",
									"    shortUrl: \"string\",",
									"    url: \"string\",",
									"    cover: \"object\"",
									"};",
									"",
									"Object.keys(fieldTypes).forEach(function(field) {",
									"    pm.test(`Field '${field}' type is correct`, function () {",
									"        pm.expect(typeof jsonData[field]).to.eql(fieldTypes[field]);",
									"    });",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 10: Non-Empty Check",
									"function checkNonEmptyField(field) {",
									"    pm.test(`Field '${field}' is non-empty`, function () {",
									"        if (typeof jsonData[field] === 'string') {",
									"            pm.expect(jsonData[field]).to.have.lengthOf.at.least(1);",
									"        } else if (typeof jsonData[field] === 'number') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        } else if (typeof jsonData[field] === 'boolean') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        }",
									"    });",
									"}",
									"",
									"const fieldsToCheck = [        ",
									"        \"id\", ",
									"        \"badges\", ",
									"        \"checkItemStates\", ",
									"        \"closed\", ",
									"        \"dueComplete\", ",
									"        \"dateLastActivity\",",
									"        \"desc\",",
									"        \"idBoard\",",
									"        \"idChecklists\",",
									"        \"idList\",",
									"        \"name\",",
									"        \"pos\",",
									"        \"shortUrl\",",
									"        \"url\",",
									"        \"cover\"",
									"    ];",
									"fieldsToCheck.forEach(function(field) {",
									"    checkNonEmptyField(field);",
									"});",
									"",
									"// Set Next Request to UpdateCard",
									"pm.execution.setNextRequest(\"UpdateCard\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure cardId is set",
									"if (!pm.environment.get(\"cardId\")) {",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/{{cardId}}?key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								"{{cardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateCard",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure cardId is set",
									"if (!pm.environment.get(\"cardId\")) {",
									"    pm.execution.setNextRequest(null);",
									"}",
									"",
									"// ---------------------------------------------------------",
									"// Function: Create random card title",
									"function getRandomCardTitle() {",
									"    const taskTypes = [\"Bug Fix\", \"Feature Implementation\", \"Refactoring\", \"Documentation\", \"Testing\", \"Design Update\"];",
									"    const priorities = [\"High\", \"Medium\", \"Low\", \"Critical\", \"Normal\"];",
									"    ",
									"    const randomTaskType = taskTypes[Math.floor(Math.random() * taskTypes.length)];",
									"    const randomPriority = priorities[Math.floor(Math.random() * priorities.length)];",
									"    ",
									"    return `${randomPriority} Priority: ${randomTaskType}`;",
									"}",
									"",
									"// Set card name to environment",
									"pm.environment.set(\"updatedCardName\", getRandomCardTitle());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Set Updated Card ID in Environment Variables",
									"pm.environment.set(\"updatedCardId\", jsonData.id);",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful PUT request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"PUT\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Validate Response Name",
									"pm.test(\"Response name is correct\", function(){",
									"\tpm.expect(jsonData.name).is.eql(pm.environment.get(\"updatedCardName\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Validate Response ID",
									"pm.test(\"Response ID is correct\", function(){",
									"\tpm.expect(jsonData.id).is.eql(pm.environment.get(\"updatedCardId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Basic Data Validation",
									"pm.test(\"Response contains the necessary properties\", function () {",
									"",
									"    let missingProperties = [];",
									"    const properties = [",
									"        \"id\", ",
									"        \"badges\", ",
									"        \"checkItemStates\", ",
									"        \"closed\", ",
									"        \"dueComplete\", ",
									"        \"dateLastActivity\",",
									"        \"desc\",",
									"        \"idBoard\",",
									"        \"idChecklists\",",
									"        \"idList\",",
									"        \"name\",",
									"        \"pos\",",
									"        \"shortUrl\",",
									"        \"url\",",
									"        \"cover\"",
									"    ];",
									"",
									"    properties.forEach(function(property) {",
									"    if (!jsonData.hasOwnProperty(property)) {",
									"        missingProperties.push(property);",
									"    }});",
									"",
									"    pm.expect(missingProperties).to.be.empty;",
									"    if (missingProperties.length > 0) {",
									"        console.log(\"Missing properties: \" + missingProperties.join(\", \"));",
									"    }",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Badges Data Validation",
									"pm.test(\"Badges contains the necessary properties\", function () {",
									"",
									"    if (jsonData.hasOwnProperty('badges')) {",
									"        let badgesMissingProperties = [];",
									"        const badgesProperties = [",
									"            \"attachmentsByType\", ",
									"            \"externalSource\", ",
									"            \"location\", ",
									"            \"votes\", ",
									"            \"viewingMemberVoted\",",
									"            \"subscribed\", ",
									"            \"attachments\", ",
									"            \"fogbugz\", ",
									"            \"checkItems\", ",
									"            \"checkItemsChecked\",",
									"            \"checkItemsEarliestDue\", ",
									"            \"comments\", ",
									"            \"description\", ",
									"            \"due\", ",
									"            \"dueComplete\",",
									"            \"lastUpdatedByAi\", ",
									"            \"start\"",
									"        ];",
									"",
									"        badgesProperties.forEach(function(property) {",
									"            if (!jsonData.badges.hasOwnProperty(property)) {",
									"                badgesMissingProperties.push(property);",
									"            }",
									"        });",
									"",
									"        pm.expect(badgesMissingProperties).to.be.empty;",
									"        if (badgesMissingProperties.length > 0) {",
									"            console.log(\"Missing badges properties: \" + badgesMissingProperties.join(\", \"));",
									"        }",
									"    }",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 6: Cover Data Validation",
									"pm.test(\"Cover contains the necessary properties\", function () {",
									"",
									"    if (jsonData.hasOwnProperty('cover')) {",
									"        let coverMissingProperties = [];",
									"        const coverProperties = [",
									"            \"idAttachment\", ",
									"            \"color\", ",
									"            \"idUploadedBackground\", ",
									"            \"size\", ",
									"            \"brightness\",",
									"            \"idPlugin\"",
									"        ];",
									"",
									"        coverProperties.forEach(function(property) {",
									"            if (!jsonData.cover.hasOwnProperty(property)) {",
									"                coverMissingProperties.push(property);",
									"            }",
									"        });",
									"",
									"        pm.expect(coverMissingProperties).to.be.empty;",
									"        if (coverMissingProperties.length > 0) {",
									"            console.log(\"Missing cover properties: \" + coverMissingProperties.join(\", \"));",
									"        }",
									"    }",
									"});",
									"",
									"// Set Next Request to CreateChecklist",
									"pm.execution.setNextRequest(\"CreateChecklist\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/{{cardId}}?name={{updatedCardName}}&key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								"{{cardId}}"
							],
							"query": [
								{
									"key": "name",
									"value": "{{updatedCardName}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteCard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful DELETE request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"DELETE\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Response has Limits Property",
									"pm.test(\"Response has limits property\", function () {",
									"    pm.expect(jsonData).to.have.property('limits');",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Limits Property is an Empty",
									"pm.test(\"Limits property is an empty\", function () {",
									"    pm.expect(jsonData.limits).to.be.an('object').that.is.empty;",
									"});",
									"",
									"// Set Next Request to DeleteBoard",
									"pm.execution.setNextRequest(\"DeleteBoard\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/{{updatedCardId}}?key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								"{{updatedCardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Checklist Operations",
			"item": [
				{
					"name": "CreateChecklist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure updatedCardId is set",
									"if (!pm.environment.get(\"updatedCardId\")) {",
									"    pm.execution.setNextRequest(null);",
									"}",
									"",
									"// ---------------------------------------------------------",
									"// Function: Create random checklist name",
									"function getRandomChecklistName() {",
									"    const prefixes = [\"Prepare\", \"Review\", \"Verify\", \"Implement\", \"Test\", \"Update\", \"Optimize\", \"Document\"];",
									"    const subjects = [\"Frontend\", \"Backend\", \"Database\", \"API\", \"UI/UX\", \"Security\", \"Performance\", \"Deployment\"];",
									"    ",
									"    const randomPrefix = prefixes[Math.floor(Math.random() * prefixes.length)];",
									"    const randomSubject = subjects[Math.floor(Math.random() * subjects.length)];",
									"    ",
									"    return `${randomPrefix} ${randomSubject}`;",
									"}",
									"",
									"// Set checklist name to environment",
									"pm.environment.set(\"checklistName\", getRandomChecklistName());",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Set Checklist ID in Environment Variables",
									"pm.environment.set(\"checklistId\", jsonData.id);",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful POST request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"POST\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Basic Data Validation",
									"pm.test(\"Response contains the necessary properties\", function () {",
									"",
									"    let missingProperties = [];",
									"    const properties = [",
									"        \"id\",",
									"        \"name\",",
									"        \"idBoard\",",
									"        \"idCard\",",
									"        \"pos\",",
									"        \"checkItems\",",
									"        \"limits\"",
									"    ];",
									"",
									"    properties.forEach(function(property) {",
									"    if (!jsonData.hasOwnProperty(property)) {",
									"        missingProperties.push(property);",
									"    }});",
									"",
									"    pm.expect(missingProperties).to.be.empty;",
									"    if (missingProperties.length > 0) {",
									"        console.log(\"Missing properties: \" + missingProperties.join(\", \"));",
									"    }",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Validate Response Name",
									"pm.test(\"Response name is correct.\", function(){",
									"\tpm.expect(jsonData.name).is.eql(pm.environment.get(\"checklistName\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 6: Validate Response ID",
									"pm.test(\"Response ID is correct.\", function(){",
									"\tpm.expect(jsonData.id).is.eql(pm.environment.get(\"checklistId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 7: Validate Response Board ID",
									"pm.test(\"Response Board ID is correct.\", function(){",
									"\tpm.expect(jsonData.idBoard).is.eql(pm.environment.get(\"boardId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 8: Validate Response Card ID",
									"pm.test(\"Response Card ID is correct.\", function(){",
									"\tpm.expect(jsonData.idCard).is.eql(pm.environment.get(\"cardId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 9: Critical Field Type Check",
									"const fieldTypes = {",
									"    id: \"string\",",
									"    name: \"string\",",
									"    idBoard: \"string\",",
									"    idCard: \"string\",",
									"    pos: \"number\",",
									"    checkItems: \"object\",",
									"    limits: \"object\"",
									"};",
									"",
									"Object.keys(fieldTypes).forEach(function(field) {",
									"    pm.test(`Field '${field}' type is correct`, function () {",
									"        pm.expect(typeof jsonData[field]).to.eql(fieldTypes[field]);",
									"    });",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 10: Non-Empty Check",
									"function checkNonEmptyField(field) {",
									"    pm.test(`Field '${field}' is non-empty`, function () {",
									"        if (typeof jsonData[field] === 'string') {",
									"            pm.expect(jsonData[field]).to.have.lengthOf.at.least(1);",
									"        } else if (typeof jsonData[field] === 'number') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        } else if (typeof jsonData[field] === 'boolean') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        }",
									"    });",
									"}",
									"",
									"const fieldsToCheck = [        ",
									"        \"id\",",
									"        \"name\",",
									"        \"idBoard\",",
									"        \"idCard\",",
									"        \"pos\",",
									"        \"checkItems\",",
									"        \"limits\"",
									"    ];",
									"fieldsToCheck.forEach(function(field) {",
									"    checkNonEmptyField(field);",
									"});",
									"",
									"// Set Next Request to GetChecklist",
									"pm.execution.setNextRequest(\"GetChecklist\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}?idCard={{updatedCardId}}&name={{checklistName}}&key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}"
							],
							"query": [
								{
									"key": "idCard",
									"value": "{{updatedCardId}}"
								},
								{
									"key": "name",
									"value": "{{checklistName}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetChecklist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful GET request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"GET\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Basic Data Validation",
									"pm.test(\"Response contains the necessary properties\", function () {",
									"",
									"    let missingProperties = [];",
									"    const properties = [",
									"        \"id\", ",
									"        \"name\", ",
									"        \"idBoard\", ",
									"        \"idCard\", ",
									"        \"pos\", ",
									"        \"checkItems\"",
									"    ];",
									"",
									"    properties.forEach(function(property) {",
									"    if (!jsonData.hasOwnProperty(property)) {",
									"        missingProperties.push(property);",
									"    }});",
									"",
									"    pm.expect(missingProperties).to.be.empty;",
									"    if (missingProperties.length > 0) {",
									"        console.log(\"Missing properties: \" + missingProperties.join(\", \"));",
									"    }",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: CheckItems Data Validation",
									"pm.test(\"CheckItems contains the necessary properties\", function () {",
									"",
									"    if (jsonData.hasOwnProperty('checkItems')) {",
									"        jsonData.checkItems.forEach(function(checkItem, index) {",
									"            let checkItemMissingProperties = [];",
									"            const checkItemProperties = [",
									"                \"id\", ",
									"                \"name\", ",
									"                \"idBoard\", ",
									"                \"idCard\", ",
									"                \"pos\",",
									"                \"due\", ",
									"                \"dueReminder\", ",
									"                \"idMember\", ",
									"                \"idChecklist\"",
									"            ];",
									"",
									"            checkItemProperties.forEach(function(property) {",
									"                if (!checkItem.hasOwnProperty(property)) {",
									"                    checkItemMissingProperties.push(property);",
									"                }",
									"            });",
									"",
									"            pm.expect(checkItemMissingProperties).to.be.empty;",
									"            if (checkItemMissingProperties.length > 0) {",
									"                console.log(\"CheckItem \" + (index + 1) + \" missing properties: \" + checkItemMissingProperties.join(\", \"));",
									"            }",
									"        });",
									"    }",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 6: Validate Response Name",
									"pm.test(\"Response name is correct.\", function(){",
									"\tpm.expect(jsonData.name).is.eql(pm.environment.get(\"checklistName\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 7: Validate Response ID",
									"pm.test(\"Response ID is correct.\", function(){",
									"\tpm.expect(jsonData.id).is.eql(pm.environment.get(\"checklistId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 8: Validate Response Board ID",
									"pm.test(\"Response Board ID is correct.\", function(){",
									"\tpm.expect(jsonData.idBoard).is.eql(pm.environment.get(\"boardId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 9: Validate Response Card ID",
									"pm.test(\"Response Card ID is correct.\", function(){",
									"\tpm.expect(jsonData.idCard).is.eql(pm.environment.get(\"cardId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 10: Critical Field Type Check",
									"const fieldTypes = {",
									"    id: \"string\",",
									"    name: \"string\",",
									"    idBoard: \"string\",",
									"    idCard: \"string\",",
									"    pos: \"number\",",
									"    checkItems: \"object\"",
									"};",
									"",
									"Object.keys(fieldTypes).forEach(function(field) {",
									"    pm.test(`Field '${field}' type is correct`, function () {",
									"        pm.expect(typeof jsonData[field]).to.eql(fieldTypes[field]);",
									"    });",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 11: Non-Empty Check",
									"function checkNonEmptyField(field) {",
									"    pm.test(`Field '${field}' is non-empty`, function () {",
									"        if (typeof jsonData[field] === 'string') {",
									"            pm.expect(jsonData[field]).to.have.lengthOf.at.least(1);",
									"        } else if (typeof jsonData[field] === 'number') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        } else if (typeof jsonData[field] === 'boolean') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        }",
									"    });",
									"}",
									"",
									"const fieldsToCheck = [        ",
									"        \"id\", ",
									"        \"name\", ",
									"        \"idBoard\", ",
									"        \"idCard\", ",
									"        \"pos\", ",
									"        \"checkItems\"",
									"    ];",
									"fieldsToCheck.forEach(function(field) {",
									"    checkNonEmptyField(field);",
									"});",
									"",
									"// Set Next Request to UpdateChecklist",
									"pm.execution.setNextRequest(\"UpdateChecklist\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure checklistId is set",
									"if (!pm.environment.get(\"checklistId\")) {",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/{{checklistId}}?key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								"{{checklistId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateChecklist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure checklistId is set",
									"if (!pm.environment.get(\"checklistId\")) {",
									"    pm.execution.setNextRequest(null);",
									"}",
									"",
									"// ---------------------------------------------------------",
									"// Function: Create random checklist name",
									"function getRandomChecklistName() {",
									"    const prefixes = [\"Prepare\", \"Review\", \"Verify\", \"Implement\", \"Test\", \"Update\", \"Optimize\", \"Document\"];",
									"    const subjects = [\"Frontend\", \"Backend\", \"Database\", \"API\", \"UI/UX\", \"Security\", \"Performance\", \"Deployment\"];",
									"    ",
									"    const randomPrefix = prefixes[Math.floor(Math.random() * prefixes.length)];",
									"    const randomSubject = subjects[Math.floor(Math.random() * subjects.length)];",
									"    ",
									"    return `${randomPrefix} ${randomSubject}`;",
									"}",
									"",
									"// Set card name to environment",
									"pm.environment.set(\"updatedChecklistName\", getRandomChecklistName());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Set Updated Checklist ID in Environment Variables",
									"pm.environment.set(\"updatedChecklistId\", jsonData.id);",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful PUT request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"PUT\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Validate Response Name",
									"pm.test(\"Response name is correct\", function(){",
									"\tpm.expect(jsonData.name).is.eql(pm.environment.get(\"updatedChecklistName\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Validate Response ID",
									"pm.test(\"Response ID is correct\", function(){",
									"\tpm.expect(jsonData.id).is.eql(pm.environment.get(\"updatedChecklistId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 6: Basic Data Validation",
									"pm.test(\"Response contains the necessary properties\", function () {",
									"",
									"    let missingProperties = [];",
									"    const properties = [",
									"        \"id\", ",
									"        \"name\", ",
									"        \"idBoard\", ",
									"        \"idCard\", ",
									"        \"pos\", ",
									"        \"checkItems\"",
									"    ];",
									"",
									"    properties.forEach(function(property) {",
									"    if (!jsonData.hasOwnProperty(property)) {",
									"        missingProperties.push(property);",
									"    }});",
									"",
									"    pm.expect(missingProperties).to.be.empty;",
									"    if (missingProperties.length > 0) {",
									"        console.log(\"Missing properties: \" + missingProperties.join(\", \"));",
									"    }",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 10: Critical Field Type Check",
									"const fieldTypes = {",
									"    id: \"string\",",
									"    name: \"string\",",
									"    idBoard: \"string\",",
									"    idCard: \"string\",",
									"    pos: \"number\",",
									"    checkItems: \"object\"",
									"};",
									"",
									"Object.keys(fieldTypes).forEach(function(field) {",
									"    pm.test(`Field '${field}' type is correct`, function () {",
									"        pm.expect(typeof jsonData[field]).to.eql(fieldTypes[field]);",
									"    });",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 11: Non-Empty Check",
									"function checkNonEmptyField(field) {",
									"    pm.test(`Field '${field}' is non-empty`, function () {",
									"        if (typeof jsonData[field] === 'string') {",
									"            pm.expect(jsonData[field]).to.have.lengthOf.at.least(1);",
									"        } else if (typeof jsonData[field] === 'number') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        } else if (typeof jsonData[field] === 'boolean') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        }",
									"    });",
									"}",
									"",
									"const fieldsToCheck = [        ",
									"        \"id\", ",
									"        \"name\", ",
									"        \"idBoard\", ",
									"        \"idCard\", ",
									"        \"pos\", ",
									"        \"checkItems\"",
									"    ];",
									"fieldsToCheck.forEach(function(field) {",
									"    checkNonEmptyField(field);",
									"});",
									"",
									"// Set Next Request to CreateCheckitem",
									"pm.execution.setNextRequest(\"CreateCheckitem\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/{{checklistId}}?name={{updatedChecklistName}}&key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								"{{checklistId}}"
							],
							"query": [
								{
									"key": "name",
									"value": "{{updatedChecklistName}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteChecklist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful DELETE request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"DELETE\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Response has Limits Property",
									"pm.test(\"Response has limits property\", function () {",
									"    pm.expect(jsonData).to.have.property('limits');",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Limits Property is an Empty",
									"pm.test(\"Limits property is an empty\", function () {",
									"    pm.expect(jsonData.limits).to.be.an('object').that.is.empty;",
									"});",
									"",
									"// Set Next Request to DeleteCard",
									"pm.execution.setNextRequest(\"DeleteCard\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/{{updatedChecklistId}}?key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								"{{updatedChecklistId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateCheckitem",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure c updatedChecklistId set",
									"if (!pm.environment.get(\"updatedChecklistId\")) {",
									"    pm.execution.setNextRequest(null);",
									"}",
									"",
									"// ---------------------------------------------------------",
									"// Function: Create random checklist item",
									"function getRandomChecklistItem() {",
									"    const actions = [\"Create\", \"Update\", \"Review\", \"Test\", \"Optimize\", \"Debug\", \"Refactor\", \"Document\"];",
									"    const components = [\"Component\", \"Function\", \"Module\", \"Class\", \"Interface\", \"Algorithm\", \"Service\", \"Endpoint\"];",
									"    const aspects = [\"Performance\", \"Security\", \"Usability\", \"Accessibility\", \"Scalability\", \"Reliability\", \"Maintainability\"];",
									"    ",
									"    const randomAction = actions[Math.floor(Math.random() * actions.length)];",
									"    const randomComponent = components[Math.floor(Math.random() * components.length)];",
									"    const randomAspect = aspects[Math.floor(Math.random() * aspects.length)];",
									"    ",
									"    return `${randomAction} ${randomComponent} for ${randomAspect}`;",
									"}",
									"",
									"// Set checklist item name to environment",
									"pm.environment.set(\"checkitemName\", getRandomChecklistItem());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Set Checklist item ID in Environment Variables",
									"pm.environment.set(\"checkitemId\", jsonData.id);",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful POST request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"POST\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Basic Data Validation",
									"pm.test(\"Response contains the necessary properties\", function () {",
									"",
									"    let missingProperties = [];",
									"    const properties = [",
									"        \"id\",",
									"        \"name\",",
									"        \"nameData\",",
									"        \"pos\",",
									"        \"state\",",
									"        \"due\",",
									"        \"dueReminder\",",
									"        \"idMember\",",
									"        \"idChecklist\",",
									"        \"limits\"",
									"    ];",
									"",
									"    properties.forEach(function(property) {",
									"    if (!jsonData.hasOwnProperty(property)) {",
									"        missingProperties.push(property);",
									"    }});",
									"",
									"    pm.expect(missingProperties).to.be.empty;",
									"    if (missingProperties.length > 0) {",
									"        console.log(\"Missing properties: \" + missingProperties.join(\", \"));",
									"    }",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Validate Response Name",
									"pm.test(\"Response name is correct.\", function(){",
									"\tpm.expect(jsonData.name).is.eql(pm.environment.get(\"checkitemName\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 6: Validate Response ID",
									"pm.test(\"Response ID is correct.\", function(){",
									"\tpm.expect(jsonData.id).is.eql(pm.environment.get(\"checkitemId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 7: Validate Response Checklist ID",
									"pm.test(\"Response Checklist ID is correct.\", function(){",
									"\tpm.expect(jsonData.idChecklist).is.eql(pm.environment.get(\"checklistId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 8: Critical Field Type Check",
									"const fieldTypes = {",
									"    id: \"string\",",
									"    name: \"string\",",
									"    nameData: \"object\",",
									"    pos: \"number\",",
									"    state: \"string\",",
									"    due: \"object\",",
									"    dueReminder: \"object\",",
									"    idMember: \"object\",",
									"    idChecklist: \"string\",",
									"    limits: \"object\"",
									"};",
									"",
									"Object.keys(fieldTypes).forEach(function(field) {",
									"    pm.test(`Field '${field}' type is correct`, function () {",
									"        pm.expect(typeof jsonData[field]).to.eql(fieldTypes[field]);",
									"    });",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 9: Non-Empty Check",
									"function checkNonEmptyField(field) {",
									"    pm.test(`Field '${field}' is non-empty`, function () {",
									"        if (typeof jsonData[field] === 'string') {",
									"            pm.expect(jsonData[field]).to.have.lengthOf.at.least(1);",
									"        } else if (typeof jsonData[field] === 'number') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        } else if (typeof jsonData[field] === 'boolean') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        }",
									"    });",
									"}",
									"",
									"const fieldsToCheck = [        ",
									"        \"id\",",
									"        \"name\",",
									"        \"nameData\",",
									"        \"pos\",",
									"        \"state\",",
									"        \"due\",",
									"        \"dueReminder\",",
									"        \"idMember\",",
									"        \"idChecklist\",",
									"        \"limits\"",
									"    ];",
									"",
									"fieldsToCheck.forEach(function(field) {",
									"    checkNonEmptyField(field);",
									"});",
									"",
									"// Set Next Request to GetCheckitem",
									"pm.execution.setNextRequest(\"GetCheckitem\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/{{updatedChecklistId}}/checkItems?name={{checkitemName}}&key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								"{{updatedChecklistId}}",
								"checkItems"
							],
							"query": [
								{
									"key": "name",
									"value": "{{checkitemName}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetCheckitem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful GET request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"GET\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Basic Data Validation",
									"pm.test(\"Response contains the necessary properties\", function () {",
									"",
									"    let missingProperties = [];",
									"    const properties = [",
									"        \"id\", ",
									"        \"name\", ",
									"        \"nameData\", ",
									"        \"pos\", ",
									"        \"state\", ",
									"        \"due\",",
									"        \"dueReminder\",",
									"        \"idMember\",",
									"        \"idChecklist\"",
									"    ];",
									"",
									"    properties.forEach(function(property) {",
									"    if (!jsonData.hasOwnProperty(property)) {",
									"        missingProperties.push(property);",
									"    }});",
									"",
									"    pm.expect(missingProperties).to.be.empty;",
									"    if (missingProperties.length > 0) {",
									"        console.log(\"Missing properties: \" + missingProperties.join(\", \"));",
									"    }",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Validate Response Name",
									"pm.test(\"Response name is correct.\", function(){",
									"\tpm.expect(jsonData.name).is.eql(pm.environment.get(\"checkitemName\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 6: Validate Response ID",
									"pm.test(\"Response ID is correct.\", function(){",
									"\tpm.expect(jsonData.id).is.eql(pm.environment.get(\"checkitemId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 7: Validate Response Checklist ID",
									"pm.test(\"Response Board ID is correct.\", function(){",
									"\tpm.expect(jsonData.idChecklist).is.eql(pm.environment.get(\"checklistId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 8: Critical Field Type Check",
									"const fieldTypes = {",
									"    id: \"string\",",
									"    name: \"string\",",
									"    nameData: \"object\",",
									"    pos: \"number\",",
									"    state: \"string\",",
									"    due: \"object\",",
									"    dueReminder: \"object\",",
									"    idMember: \"object\",",
									"    idChecklist: \"string\"",
									"    ",
									"};",
									"",
									"Object.keys(fieldTypes).forEach(function(field) {",
									"    pm.test(`Field '${field}' type is correct`, function () {",
									"        pm.expect(typeof jsonData[field]).to.eql(fieldTypes[field]);",
									"    });",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 11: Non-Empty Check",
									"function checkNonEmptyField(field) {",
									"    pm.test(`Field '${field}' is non-empty`, function () {",
									"        if (typeof jsonData[field] === 'string') {",
									"            pm.expect(jsonData[field]).to.have.lengthOf.at.least(1);",
									"        } else if (typeof jsonData[field] === 'number') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        } else if (typeof jsonData[field] === 'boolean') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        }",
									"    });",
									"}",
									"",
									"const fieldsToCheck = [        ",
									"        \"id\", ",
									"        \"name\", ",
									"        \"nameData\", ",
									"        \"pos\", ",
									"        \"state\", ",
									"        \"due\",",
									"        \"dueReminder\",",
									"        \"idMember\",",
									"        \"idChecklist\"",
									"    ];",
									"fieldsToCheck.forEach(function(field) {",
									"    checkNonEmptyField(field);",
									"});",
									"",
									"// Set Next Request to DeleteCheckitem",
									"pm.execution.setNextRequest(\"DeleteCheckitem\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure checkitemId set",
									"if (!pm.environment.get(\"checkitemId\")) {",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/{{updatedChecklistId}}/checkItems/{{checkitemId}}?key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								"{{updatedChecklistId}}",
								"checkItems",
								"{{checkitemId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteCheckitem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful DELETE request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"DELETE\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Response has Limits Property",
									"pm.test(\"Response has limits property\", function () {",
									"    pm.expect(jsonData).to.have.property('limits');",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Limits Property is an Empty",
									"pm.test(\"Limits property is an empty\", function () {",
									"    pm.expect(jsonData.limits).to.be.an('object').that.is.empty;",
									"});",
									"",
									"// Set Next Request to CreateLabel",
									"pm.execution.setNextRequest(\"CreateLabel\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/{{updatedChecklistId}}/checkItems/{{checkitemId}}?key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								"{{updatedChecklistId}}",
								"checkItems",
								"{{checkitemId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Label Operations",
			"item": [
				{
					"name": "CreateLabel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure updatedBoardId is set",
									"if (!pm.environment.get(\"updatedBoardId\")) {",
									"    pm.execution.setNextRequest(null);",
									"}",
									"",
									"// ---------------------------------------------------------",
									"// Function 1: Create random label",
									"function getRandomLabel() {",
									"    const labels = [",
									"        \"Bug\", \"Feature\", \"Enhancement\", \"Documentation\", \"Test\",",
									"        \"UI/UX\", \"Performance\", \"Security\", \"Refactor\", \"Optimization\",",
									"        \"Critical\", \"High Priority\", \"Low Priority\", \"Question\",",
									"        \"Backend\", \"Frontend\", \"Database\", \"API\", \"DevOps\", \"Accessibility\"",
									"    ];",
									"    ",
									"    return labels[Math.floor(Math.random() * labels.length)];",
									"}",
									"",
									"// Set label name to environment",
									"pm.environment.set(\"labelName\", getRandomLabel());",
									"",
									"",
									"// ---------------------------------------------------------",
									"// Function 2: Create random color for label",
									"function getRandomLabelColor() {",
									"    const validColors = [",
									"        \"yellow\", \"purple\", \"blue\", \"red\", \"green\", ",
									"        \"orange\", \"black\", \"sky\", \"pink\", \"lime\"",
									"    ];",
									"",
									"    return validColors[Math.floor(Math.random() * validColors.length)];",
									"}",
									"",
									"// Set label color to environment",
									"pm.environment.set(\"labelColor\", getRandomLabelColor());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Set Label ID in Environment Variables",
									"pm.environment.set(\"labelId\", jsonData.id);",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful POST request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"POST\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Basic Data Validation",
									"pm.test(\"Response contains the necessary properties\", function () {",
									"",
									"    let missingProperties = [];",
									"    const properties = [",
									"        \"id\", ",
									"        \"idBoard\", ",
									"        \"name\", ",
									"        \"color\", ",
									"        \"uses\", ",
									"        \"limits\"",
									"    ];",
									"",
									"    properties.forEach(function(property) {",
									"    if (!jsonData.hasOwnProperty(property)) {",
									"        missingProperties.push(property);",
									"}});",
									"",
									"    pm.expect(missingProperties).to.be.empty;",
									"    if (missingProperties.length > 0) {",
									"        console.log(\"Missing properties: \" + missingProperties.join(\", \"));",
									"    }",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Validate Response Name",
									"pm.test(\"Response name is correct.\", function(){",
									"\tpm.expect(jsonData.name).is.eql(pm.environment.get(\"labelName\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 6: Validate Response ID",
									"pm.test(\"Response ID is correct.\", function(){",
									"\tpm.expect(jsonData.id).is.eql(pm.environment.get(\"labelId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 7: Validate Response Color",
									"pm.test(\"Response Board ID is correct.\", function(){",
									"\tpm.expect(jsonData.color).is.eql(pm.environment.get(\"labelColor\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 8: Validate Response Board ID",
									"pm.test(\"Response Card ID is correct.\", function(){",
									"\tpm.expect(jsonData.idBoard).is.eql(pm.environment.get(\"boardId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 9: Critical Field Type Check",
									"const fieldTypes = {",
									"    id: \"string\",",
									"    idBoard: \"string\",",
									"    name: \"string\",",
									"    color: \"string\",",
									"    uses: \"number\",",
									"    limits: \"object\"",
									"};",
									"",
									"Object.keys(fieldTypes).forEach(function(field) {",
									"    pm.test(`Field '${field}' type is correct`, function () {",
									"        pm.expect(typeof jsonData[field]).to.eql(fieldTypes[field]);",
									"    });",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 10: Non-Empty Check",
									"function checkNonEmptyField(field) {",
									"    pm.test(`Field '${field}' is non-empty`, function () {",
									"        if (typeof jsonData[field] === 'string') {",
									"            pm.expect(jsonData[field]).to.have.lengthOf.at.least(1);",
									"        } else if (typeof jsonData[field] === 'number') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        } else if (typeof jsonData[field] === 'boolean') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        }",
									"    });",
									"}",
									"",
									"const fieldsToCheck = [        ",
									"        \"id\", ",
									"        \"idBoard\", ",
									"        \"name\", ",
									"        \"color\", ",
									"        \"uses\", ",
									"        \"limits\"",
									"    ];",
									"fieldsToCheck.forEach(function(field) {",
									"    checkNonEmptyField(field);",
									"});",
									"",
									"// Set Next Request to GetLabel",
									"pm.execution.setNextRequest(\"GetLabel\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}?name={{labelName}}&color={{labelColor}}&idBoard={{updatedBoardId}}&key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}"
							],
							"query": [
								{
									"key": "name",
									"value": "{{labelName}}"
								},
								{
									"key": "color",
									"value": "{{labelColor}}"
								},
								{
									"key": "idBoard",
									"value": "{{updatedBoardId}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetLabel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful GET request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"GET\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Basic Data Validation",
									"pm.test(\"Response contains the necessary properties\", function () {",
									"",
									"    let missingProperties = [];",
									"    const properties = [",
									"        \"id\", ",
									"        \"idBoard\", ",
									"        \"name\", ",
									"        \"color\", ",
									"        \"uses\"",
									"    ];",
									"",
									"    properties.forEach(function(property) {",
									"    if (!jsonData.hasOwnProperty(property)) {",
									"        missingProperties.push(property);",
									"}});",
									"",
									"    pm.expect(missingProperties).to.be.empty;",
									"    if (missingProperties.length > 0) {",
									"        console.log(\"Missing properties: \" + missingProperties.join(\", \"));",
									"    }",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Validate Response Name",
									"pm.test(\"Response name is correct.\", function(){",
									"\tpm.expect(jsonData.name).is.eql(pm.environment.get(\"labelName\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 6: Validate Response ID",
									"pm.test(\"Response ID is correct.\", function(){",
									"\tpm.expect(jsonData.id).is.eql(pm.environment.get(\"labelId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 7: Validate Response Color",
									"pm.test(\"Response Board ID is correct.\", function(){",
									"\tpm.expect(jsonData.color).is.eql(pm.environment.get(\"labelColor\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 8: Validate Response Board ID",
									"pm.test(\"Response Card ID is correct.\", function(){",
									"\tpm.expect(jsonData.idBoard).is.eql(pm.environment.get(\"boardId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 9: Critical Field Type Check",
									"const fieldTypes = {",
									"    id: \"string\",",
									"    idBoard: \"string\",",
									"    name: \"string\",",
									"    color: \"string\",",
									"    uses: \"number\"   ",
									"};",
									"",
									"Object.keys(fieldTypes).forEach(function(field) {",
									"    pm.test(`Field '${field}' type is correct`, function () {",
									"        pm.expect(typeof jsonData[field]).to.eql(fieldTypes[field]);",
									"    });",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 10: Non-Empty Check",
									"function checkNonEmptyField(field) {",
									"    pm.test(`Field '${field}' is non-empty`, function () {",
									"        if (typeof jsonData[field] === 'string') {",
									"            pm.expect(jsonData[field]).to.have.lengthOf.at.least(1);",
									"        } else if (typeof jsonData[field] === 'number') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        } else if (typeof jsonData[field] === 'boolean') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        }",
									"    });",
									"}",
									"",
									"const fieldsToCheck = [        ",
									"        \"id\", ",
									"        \"idBoard\", ",
									"        \"name\", ",
									"        \"color\", ",
									"        \"uses\", ",
									"        \"limits\"",
									"    ];",
									"fieldsToCheck.forEach(function(field) {",
									"    checkNonEmptyField(field);",
									"});",
									"",
									"// Set Next Request to UpdateLabel",
									"pm.execution.setNextRequest(\"UpdateLabel\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure labelId is set",
									"if (!pm.environment.get(\"labelId\")) {",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/{{labelId}}?key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								"{{labelId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateLabel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure labelId is set",
									"if (!pm.environment.get(\"labelId\")) {",
									"    pm.execution.setNextRequest(null);",
									"}",
									"",
									"// ---------------------------------------------------------",
									"// Function: Create random label",
									"function getRandomLabel() {",
									"    const labels = [",
									"        \"Bug\", \"Feature\", \"Enhancement\", \"Documentation\", \"Test\",",
									"        \"UI/UX\", \"Performance\", \"Security\", \"Refactor\", \"Optimization\",",
									"        \"Critical\", \"High Priority\", \"Low Priority\", \"Question\",",
									"        \"Backend\", \"Frontend\", \"Database\", \"API\", \"DevOps\", \"Accessibility\"",
									"    ];",
									"    ",
									"    return labels[Math.floor(Math.random() * labels.length)];",
									"}",
									"",
									"// Set label name to environment",
									"pm.environment.set(\"updatedLabelName\", getRandomLabel());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Set Updated Label ID in Environment Variables",
									"pm.environment.set(\"updatedLabelId\", jsonData.id);",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful PUT request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"PUT\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Basic Data Validation",
									"pm.test(\"Response contains the necessary properties\", function () {",
									"",
									"    let missingProperties = [];",
									"    const properties = [",
									"        \"id\", ",
									"        \"idBoard\", ",
									"        \"name\", ",
									"        \"color\", ",
									"        \"uses\", ",
									"    ];",
									"",
									"    properties.forEach(function(property) {",
									"    if (!jsonData.hasOwnProperty(property)) {",
									"        missingProperties.push(property);",
									"}});",
									"",
									"    pm.expect(missingProperties).to.be.empty;",
									"    if (missingProperties.length > 0) {",
									"        console.log(\"Missing properties: \" + missingProperties.join(\", \"));",
									"    }",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Validate Response Updated Name",
									"pm.test(\"Response name is correct.\", function(){",
									"\tpm.expect(jsonData.name).is.eql(pm.environment.get(\"updatedLabelName\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 6: Validate Response ID",
									"pm.test(\"Response Updated ID is correct.\", function(){",
									"\tpm.expect(jsonData.id).is.eql(pm.environment.get(\"updatedLabelId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 7: Validate Response Color",
									"pm.test(\"Response Board ID is correct.\", function(){",
									"\tpm.expect(jsonData.color).is.eql(pm.environment.get(\"labelColor\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 8: Validate Response Board ID",
									"pm.test(\"Response Card ID is correct.\", function(){",
									"\tpm.expect(jsonData.idBoard).is.eql(pm.environment.get(\"boardId\"));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 9: Critical Field Type Check",
									"const fieldTypes = {",
									"    id: \"string\",",
									"    idBoard: \"string\",",
									"    name: \"string\",",
									"    color: \"string\",",
									"    uses: \"number\"   ",
									"};",
									"",
									"Object.keys(fieldTypes).forEach(function(field) {",
									"    pm.test(`Field '${field}' type is correct`, function () {",
									"        pm.expect(typeof jsonData[field]).to.eql(fieldTypes[field]);",
									"    });",
									"});",
									"",
									"",
									"// ---------------------------------------------------------",
									"// Test 10: Non-Empty Check",
									"function checkNonEmptyField(field) {",
									"    pm.test(`Field '${field}' is non-empty`, function () {",
									"        if (typeof jsonData[field] === 'string') {",
									"            pm.expect(jsonData[field]).to.have.lengthOf.at.least(1);",
									"        } else if (typeof jsonData[field] === 'number') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        } else if (typeof jsonData[field] === 'boolean') {",
									"            pm.expect(jsonData[field]).to.not.be.null.and.to.not.be.undefined;",
									"        }",
									"    });",
									"}",
									"",
									"const fieldsToCheck = [        ",
									"        \"id\", ",
									"        \"idBoard\", ",
									"        \"name\", ",
									"        \"color\", ",
									"        \"uses\"",
									"    ];",
									"fieldsToCheck.forEach(function(field) {",
									"    checkNonEmptyField(field);",
									"});",
									"",
									"// Set Next Request to DeleteLabel",
									"pm.execution.setNextRequest(\"DeleteLabel\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/{{labelId}}?name={{updatedLabelName}}&key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								"{{labelId}}"
							],
							"query": [
								{
									"key": "name",
									"value": "{{updatedLabelName}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteLabel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ---------------------------------------------------------",
									"// Parse Response JSON Data",
									"let jsonData = pm.response.json();",
									"",
									"// ---------------------------------------------------------",
									"// Get maxResponseTime value from environment",
									"let maxResponseTime = pm.environment.get(\"maxResponseTime\");",
									"",
									"// ---------------------------------------------------------",
									"// Test 1: Response Time",
									"pm.test(\"Response time is acceptable\", function () {",
									"\tpm.expect(pm.response.responseTime).to.be.below(parseInt(maxResponseTime, 10));",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 2: HTTP Method and Status Code",
									"pm.test(\"Successful DELETE request\", function () {",
									"\tpm.expect(pm.request.method).to.eq(\"DELETE\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"\tpm.response.to.have.status(200);",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 3: Response Format",
									"pm.test(\"Content-Type is JSON in header\", function () {",
									"\tpm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 4: Response has Limits Property",
									"pm.test(\"Response has limits property\", function () {",
									"    pm.expect(jsonData).to.have.property('limits');",
									"});",
									"",
									"// ---------------------------------------------------------",
									"// Test 5: Limits Property is an Empty",
									"pm.test(\"Limits property is an empty\", function () {",
									"    pm.expect(jsonData.limits).to.be.an('object').that.is.empty;",
									"});",
									"",
									"// Set Next Request to DeleteChecklist",
									"pm.execution.setNextRequest(\"DeleteChecklist\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{endpoint}}/{{labelId}}?key={{trelloKey}}&token={{trelloToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{endpoint}}",
								"{{labelId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"var endpointType = pm.info.requestName;",
					"",
					"if (endpointType.includes(\"Board\")) {",
					"    pm.environment.set(\"endpoint\", \"boards\");",
					"} else if (endpointType.includes(\"Card\")) {",
					"    pm.environment.set(\"endpoint\", \"cards\");",
					"} else if (endpointType.includes(\"List\")) {",
					"    pm.environment.set(\"endpoint\", \"lists\");",
					"} else if (endpointType.includes(\"Checklist\")) {",
					"    pm.environment.set(\"endpoint\", \"checklist\");",
					"} else if (endpointType.includes(\"Label\")) {",
					"    pm.environment.set(\"endpoint\", \"label\");",
					"} ",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}
